import groovy.io.FileType

apply plugin: 'java'
apply plugin: 'nexus'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

task checkstyle(type: Checkstyle) {
  configFile = rootProject.file('checkstyle.xml')
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  classpath = files()
}

compileJava {
  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7
}

task copyTestResources(type: Copy, group: 'fixtures') {
  from sourceSets.test.resources
  into sourceSets.test.output.classesDir
}

task generateFixtures(dependsOn: copyTestResources, group: 'fixtures') << {
  def directory = projectDir.path + '/src/test/java'
  new File(directory + '/fixtures').mkdir()
  def path = directory + "/fixtures/Fixtures.java"

  def builder = '' << ''
  builder.append("package fixtures;\n\n")
  builder.append("public class Fixtures {\n\n")
  builder.append("  private Fixtures() {\n")
  builder.append("    //no instance\n")
  builder.append("  }\n\n")

  def resources = sourceSets.test.resources.srcDirs.getAt(0)
  if (resources.size() > 0) {
    resources.eachDirMatch("fixtures") { dir ->
      def fixturesFile = dir
      fixturesFile.eachFile(FileType.FILES) { file ->
        if (file.name.endsWith(".yaml")) {
          String fileName = file.name.split('\\.')[0]
          builder.append("  public static final String ")
              .append(fileName.toUpperCase())
              .append(" = ")
              .append('\"')
              .append(fileName)
              .append('\";\n')
        }
      }
    }
  }
  builder.append("}\n")

  new File(path).write(builder.toString())
}

compileTestJava.dependsOn generateFixtures

dependencies {
  compile 'junit:junit:4.12'
  compile('com.squareup.okhttp3:mockwebserver:3.4.1') {
    exclude group: "junit"
  }
  compile('com.github.DroidsOnRoids:snakeyaml:7ab51c9802') {
    transitive false
  }

  testCompile 'org.assertj:assertj-core:3.5.2'
  testCompile 'org.mockito:mockito-core:2.2.7'
  testCompile 'com.squareup.okhttp3:okhttp:3.4.1'
}

modifyPom {
  project {
    name POM_NAME
    description POM_DESCRIPTION
    url POM_URL

    scm {
      url POM_SCM_URL
      connection POM_SCM_CONNECTION
      developerConnection POM_SCM_DEV_CONNECTION
    }

    licenses {
      license {
        name POM_LICENCE_NAME
        url POM_LICENCE_URL
        Distribution POM_LICENCE_DIST
      }
    }

    developers {
      developer {
        id POM_DEVELOPER_ID
        name POM_DEVELOPER_NAME
      }
    }
  }
}

publishing {
  repositories {
    mavenLocal()
  }
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
